service: lambda-api-alice

frameworkVersion: '3'

provider:
  name: aws
  stage: dev
  region: eu-central-1
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  environment:
    TOKEN_PRIVATE_KEY: ${self:custom.secret.token-private-key}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"

functions:
  getQRCode:
    handler: code-service.getQRCode
    events:
      - http:
          path: qr-codes
          method: post
          cors: true

  postUser:
    handler: user-service.postUser
    events:
      - http:
          path: users
          method: post
          cors: true

  getOwnUser:
    handler: user-service.getOwnUser
    events:
      - http:
          path: users/me
          method: get
          cors: true

  postAssets:
    handler: user-service.postAssets
    events:
      - http:
          path: assets
          method: post
          cors: true

  getAssets:
    handler: user-service.getAssets
    events:
      - http:
          path: assets
          method: get
          cors: true

  getAsset:
    handler: user-service.getAsset
    events:
      - http:
          path: assets/{id}
          method: get
          cors: true

  deleteAsset:
    handler: user-service.deleteAsset
    events:
      - http:
          path: assets/{id}
          method: delete
          cors: true

  getCardsOfAsset:
    handler: user-service.getCardsOfAsset
    events:
      - http:
          path: assets/{id}/cards
          method: get
          cors: true

  postCards:
    handler: user-service.postCards
    events:
      - http:
          path: cards
          method: post
          cors: true

  getCards:
    handler: user-service.getCards
    events:
      - http:
          path: cards
          method: get
          cors: true

  getCard:
    handler: user-service.getCard
    events:
      - http:
          path: cards/{id}
          method: get
          cors: true

  deleteCard:
    handler: user-service.deleteCard
    events:
      - http:
          path: cards/{id}
          method: delete
          cors: true

  getPublicByCard:
    handler: user-service.getPublicByCard
    events:
      - http:
          path: cards/{id}/public
          method: get
          cors: true

  login:
    handler: user-service.login
    events:
      - http:
          path: login
          method: post
          cors: true
  
  forgotPassword:
    handler: user-service.forgotPassword
    events:
      - http:
          path: forgot-password
          method: post
          cors: true

  recoverPassword:
    handler: user-service.recoverPassword
    events:
      - http:
          path: recover-password
          method: post
          cors: true


plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  secret: ${ssm:/aws/reference/secretsmanager/dev/autoping/apialice}
  apigwBinary:
    types:
      - '*/*'
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true


resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: autoping-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    assets:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: autoping-assets
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    cards:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: autoping-cards
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    tokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: autoping-tokens
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
